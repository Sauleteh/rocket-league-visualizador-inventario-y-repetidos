/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package detectorcopiasrl;

import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.Normalizer;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.Pattern;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import org.jsoup.Connection.Response;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Parser;
import org.jsoup.select.Elements;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;


/* TODO

- Hacer que la función getHtmlDocument() se ejecute de forma asíncrona.
- Arreglar la búsqueda de items, se ha encontrado que el Honda Civic Type R naranja no cuesta 100, sino 150. Lo
que ha pasado es que ha cogido un objeto que aparecía más abajo porque contenía el nombre también.
- Hay nombres que son diferentes: primero es porque hay nombres que no están en español y segundo hay items que se
escriben de forma diferente en rlInsider, como las calcomanías exclusivas de un solo coche.
- Tarda mucho en encontrar los precios (Con precio: 77331ms, sin precio: 504ms)

*/

/**
 *
 * @author Saulete
 */
public class principal extends javax.swing.JFrame {
    
    private static final String URL = "https://rl.insider.gg/es/pc";
    private static Document pagina;
    
    /**
     * Creates new form principal
     */
    public principal() {
        initComponents();
        abrirPagina();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        BEmpezarBusqueda = new javax.swing.JButton();
        BMenosSizeFont = new javax.swing.JButton();
        BMasSizeFont = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TPTextoDuplicados = new javax.swing.JTextPane();
        BBuscarNombre = new javax.swing.JButton();
        TFBuscarNombre = new javax.swing.JTextField();
        LMostrarTodo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        CBLimitado = new javax.swing.JCheckBox();
        CBMercadoNegro = new javax.swing.JCheckBox();
        CBExotico = new javax.swing.JCheckBox();
        CBImportado = new javax.swing.JCheckBox();
        CBRaro = new javax.swing.JCheckBox();
        CBMuyRaro = new javax.swing.JCheckBox();
        CBInusual = new javax.swing.JCheckBox();
        CBPorColor = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        LEstadoPagina = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        LFechaComprobacion = new javax.swing.JLabel();
        BActualizarPagina = new javax.swing.JButton();
        CBMostrarPrecios = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Detector de copias");
        setMinimumSize(new java.awt.Dimension(775, 455));
        setPreferredSize(new java.awt.Dimension(942, 455));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        BEmpezarBusqueda.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        BEmpezarBusqueda.setText("Empezar a buscar duplicados");
        BEmpezarBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BEmpezarBusquedaActionPerformed(evt);
            }
        });

        BMenosSizeFont.setText("-");
        BMenosSizeFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMenosSizeFontActionPerformed(evt);
            }
        });

        BMasSizeFont.setText("+");
        BMasSizeFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMasSizeFontActionPerformed(evt);
            }
        });

        TPTextoDuplicados.setEditable(false);
        TPTextoDuplicados.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        TPTextoDuplicados.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TPTextoDuplicadosKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(TPTextoDuplicados);

        BBuscarNombre.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        BBuscarNombre.setText("Buscar un item en el inventario");
        BBuscarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBuscarNombreActionPerformed(evt);
            }
        });

        TFBuscarNombre.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        TFBuscarNombre.setText("Escribe aquí un item a buscar...");
        TFBuscarNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TFBuscarNombreFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFBuscarNombreFocusLost(evt);
            }
        });

        LMostrarTodo.setText("Consejo: Escribe \"0-9a-zA-Z\" sin comillas para mostrar todo (click aquí para copiar)");
        LMostrarTodo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LMostrarTodoMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                LMostrarTodoMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                LMostrarTodoMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(BMenosSizeFont, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BEmpezarBusqueda, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(BMasSizeFont, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(TFBuscarNombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BBuscarNombre))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(LMostrarTodo)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(BEmpezarBusqueda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BMasSizeFont, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BMenosSizeFont, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(BBuscarNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TFBuscarNombre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LMostrarTodo)
                .addGap(16, 16, 16))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filtrar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        jPanel2.setName(""); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Por calidad", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N

        CBLimitado.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        CBLimitado.setSelected(true);
        CBLimitado.setText("Limitado");

        CBMercadoNegro.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        CBMercadoNegro.setSelected(true);
        CBMercadoNegro.setText("Mercado negro");

        CBExotico.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        CBExotico.setSelected(true);
        CBExotico.setText("Exótico");

        CBImportado.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        CBImportado.setSelected(true);
        CBImportado.setText("Importado");

        CBRaro.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        CBRaro.setSelected(true);
        CBRaro.setText("Raro");

        CBMuyRaro.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        CBMuyRaro.setSelected(true);
        CBMuyRaro.setText("Muy raro");

        CBInusual.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        CBInusual.setSelected(true);
        CBInusual.setText("Inusual");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CBInusual)
                    .addComponent(CBRaro)
                    .addComponent(CBMuyRaro)
                    .addComponent(CBImportado)
                    .addComponent(CBExotico)
                    .addComponent(CBMercadoNegro)
                    .addComponent(CBLimitado))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CBInusual)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBRaro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBMuyRaro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBImportado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBExotico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBMercadoNegro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBLimitado)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        CBPorColor.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        CBPorColor.setSelected(true);
        CBPorColor.setText("Por color (colores distinguidos)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CBPorColor)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBPorColor))
        );

        jLabel1.setText("Estado RL Insider:");

        LEstadoPagina.setText("Sin comprobar");

        jLabel2.setText("Última comprobación:");

        LFechaComprobacion.setText("Sin comprobar");

        BActualizarPagina.setText("Actualizar");
        BActualizarPagina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActualizarPaginaActionPerformed(evt);
            }
        });

        CBMostrarPrecios.setSelected(true);
        CBMostrarPrecios.setText("Mostrar precios");
        CBMostrarPrecios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBMostrarPreciosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(LFechaComprobacion)
                                .addComponent(LEstadoPagina)))
                        .addComponent(BActualizarPagina, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(CBMostrarPrecios))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(LEstadoPagina))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(LFechaComprobacion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BActualizarPagina)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CBMostrarPrecios)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        System.out.printf("Altura: %d, Ancho: %d\n", this.getSize().height, this.getSize().width);
    }//GEN-LAST:event_formComponentResized

    private void abrirPagina()
    {
        if (getStatusConnectionCode(URL) == 200)   // Si la página funciona...
        {
            this.LEstadoPagina.setText("OK");
            this.LEstadoPagina.setForeground(new Color(0, 180, 0));
            
            pagina = getHtmlDocument(URL);
        }
        else    // Si no funciona la página...
        {
            this.LEstadoPagina.setText("Error " + getStatusConnectionCode(URL));
            this.LEstadoPagina.setForeground(Color.red);
        }
        
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy (HH:mm:ss)");  
        LocalDateTime now = LocalDateTime.now();  
        this.LFechaComprobacion.setText(dtf.format(now));
    }
    
    /**
     * Insertar un mensaje para un TextPane
     * @param textPane es el objeto TextPane en el que se desea insertar un mensaje
     * @param msg es el mensaje a escribir en el TextPane
     * @param c es el color con el que se desea escribir el mensaje
     */
    private void appendToPane(JTextPane textPane, String msg, Color c)
    {
        StyledDocument doc = textPane.getStyledDocument();

        Style style = textPane.addStyle("Estilo", null);
        StyleConstants.setForeground(style, c);

        try
        {
            doc.insertString(doc.getLength(), msg, style);
        }
        catch (BadLocationException e)
        {
            System.err.println(e.getMessage());
        }
    }
    
    /**
     * Función para mirar si una calidad se quiere filtrar
     * @param calidad es la calidad a analizar
     * @return true si está activada la checkbox de la calidad para filtrar, false en caso contrario
     */
    private boolean seQuiereFiltrar(String calidad)
    {
        // Uncommon
        if (calidad.equals("Uncommon")) return CBInusual.isSelected();
        // Rare
        else if (calidad.equals("Rare")) return CBRaro.isSelected();
        // Very rare
        else if (calidad.equals("Very rare")) return CBMuyRaro.isSelected();
        // Import
        else if (calidad.equals("Import")) return CBImportado.isSelected();
        // Exotic
        else if (calidad.equals("Exotic")) return CBExotico.isSelected();
        // BlackMarket
        else if (calidad.equals("BlackMarket")) return CBMercadoNegro.isSelected();
        // Limited
        else if (calidad.equals("Limited")) return CBLimitado.isSelected();
        // Legacy, Common, unknown o cualquier otra calidad
        else return true;
    }
    
    private boolean analizarColor(String color1, String color2)
    {
        if (CBPorColor.isSelected()) return color1.equals(color2);
        else return true;
    }
    
    private String traduccionNone(String[][] linea, int x, int y)
    {
        if (y == 3)
        {
            if (linea[x][y].equals("none")) return "No_color";
            else return linea[x][y];
        }
        else if (y == 6)
        {
            if (linea[x][y].equals("none")) return "No_cert";
            else return linea[x][y];
        }
        else if (y == 12)
        {
            if (linea[x][y].equals("none")) return "No_SpEdition";
            else return linea[x][y];
        }
        else return "ERROR";
    }
    
    private String traduccionTradeable(String character)
    {
        if (character.equals("true")) return "Tradeable";
        else return "No_tradeable";
    }
    private int colorSecreto = 0;
    private static final int NUM_COLUMNAS = 16;
    
    /**
     * Función para procesar el archivo de inventario
     * @param fichero es un objeto Scanner para abrir el archivo
     * @return la matriz y el número de filas en las posiciones 0 y 1, respectivamente
     * @throws IOException 
     */
    private Object[] conseguirMatrizObjetos(Scanner fichero) throws IOException
    {
        fichero = new Scanner(new FileInputStream(System.getenv("APPDATA") + "\\bakkesmod\\bakkesmod\\data\\inventory.csv"), "UTF-8");   // Abrir fichero
        fichero.useDelimiter(",|\r\n");

        // Procesar el fichero, guardando todo en una matriz (ignorar la primera línea)
        fichero.nextLine(); // Ignorar primera línea
        int linLength = 0;
        while (fichero.hasNextLine()) // Guardar el número de filas de la matriz
        {
            linLength++;
            fichero.nextLine();
        }

        fichero = new Scanner(new FileInputStream(System.getenv("APPDATA") + "\\bakkesmod\\bakkesmod\\data\\inventory.csv"), "UTF-8");   // Volver al principio
        fichero.useDelimiter(",|\r\n");
        fichero.nextLine(); // Ignorar primera línea

        String[][] lin = new String[linLength][NUM_COLUMNAS];
        int fila = 0;

        while (fichero.hasNext())
        {
            for (int i = 0; i < NUM_COLUMNAS; i++) {
                lin[fila][i] = fichero.next();
                if (i == 0 && lin[fila][0].equals("6890")) // Item problemático: "Lights, Camera, Action!"
                {
                    lin[fila][1] = fichero.next() + ", " + fichero.next() + ", " + fichero.next();
                    i++;
                }
            }
            fila++;
        }
        return new Object[] {lin, linLength, fichero};
    }
    
    private void BEmpezarBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BEmpezarBusquedaActionPerformed
        long start2 = System.currentTimeMillis();
        
        this.TPTextoDuplicados.setText("");
        Scanner fichero = null;
        try
        {
            Object[] procesadoInventario = conseguirMatrizObjetos(fichero);
            String[][] lin = (String[][])procesadoInventario[0];
            int linLength = (int)procesadoInventario[1];
            fichero = (Scanner)procesadoInventario[2];

            boolean encontrado = false; // Saber si ha habido al menos un duplicado
            ArrayList<Integer> linPrint = new ArrayList<Integer>();   // Lista de elementos ya mostrados
            boolean imprimirLin = true; // Saber si hay que imprimir la línea
            int cont = 0;   // Índice de los duplicados al imprimir

            for (int contador = 0; contador < linLength; contador++)
            {
                for (int i = 0; i < linLength; i++)
                {
                    if (lin[contador][0].equals(lin[i][0])) // ID
                    {
                        if (lin[contador][13].equals("0") && lin[i][13].equals("0")) // Plano (blueprint)
                        {
                            if (seQuiereFiltrar(lin[contador][7]) && seQuiereFiltrar(lin[i][7])) // Calidad
                            {
                                if (lin[contador][9].equals("true") || lin[i][9].equals("true")) // Tradeable
                                {
                                    if (analizarColor(lin[contador][3], lin[i][3])) // Color
                                    {
                                        if (contador != i) // Si no es la misma línea...
                                        {
                                            if (!encontrado)
                                            {
                                                TPTextoDuplicados.setText(TPTextoDuplicados.getText() + linLength + " items procesados, se han detectado posibles duplicados vendibles:\n");
                                                encontrado = true;
                                            }
                                            for (int j = 0; j < linPrint.size(); j++)
                                            {
                                                if (linPrint.get(j).equals(contador)) imprimirLin = false;
                                            }
                                            if (imprimirLin)
                                            {
                                                cont++;
                                                
                                                if (colorSecreto == 0) MiColor.cambiaColorPrincipales();
                                                else MiColor.cambiaColorRainbow();
                                                /*TPTextoDuplicados.setText(TPTextoDuplicados.getText() + cont + ". " +
                                                        lin[contador][1] + " [" + lin[contador][2] + "] (" + traduccionNone(lin, contador, 3) +
                                                        ", " + traduccionNone(lin, contador, 6) + ", " + traduccionNone(lin, contador, 12) + ") " +
                                                        lin[contador][7] + ", " + traduccionTradeable(lin[contador][9]) + "\n");*/
                                                appendToPane(TPTextoDuplicados,
                                                        cont + ". " + lin[contador][1] + " [" + lin[contador][2] + "] (" +
                                                        traduccionNone(lin, contador, 3) + ", " + traduccionNone(lin, contador, 6) +
                                                        ", " + traduccionNone(lin, contador, 12) + ") " +
                                                        lin[contador][7] + ", " + traduccionTradeable(lin[contador][9]) + " {" + precioObjeto(lin[contador][1], traduccionNone(lin, contador, 3)) + "}\n",
                                                        MiColor.getColor());
                                                linPrint.add(contador);
                                            }
                                            else imprimirLin = true;

                                            for (int j = 0; j < linPrint.size(); j++)
                                            {
                                                if (linPrint.get(j).equals(i)) imprimirLin = false;
                                            }
                                            if (imprimirLin)
                                            {
                                                /*TPTextoDuplicados.setText(TPTextoDuplicados.getText() + cont + ". " +
                                                        lin[i][1] + " [" + lin[i][2] + "] (" + traduccionNone(lin, i, 3) +
                                                        ", " + traduccionNone(lin, i, 6) + ", " + traduccionNone(lin, i, 12) + ") " +
                                                        lin[i][7] + ", " + traduccionTradeable(lin[i][9]) + "\n");*/
                                                appendToPane(TPTextoDuplicados,
                                                        cont + ". " + lin[i][1] + " [" + lin[i][2] +
                                                        "] (" + traduccionNone(lin, i, 3) + ", " +
                                                        traduccionNone(lin, i, 6) + ", " + traduccionNone(lin, i, 12) + ") " +
                                                        lin[i][7] + ", " + traduccionTradeable(lin[i][9]) + " {" + precioObjeto(lin[i][1], traduccionNone(lin, i, 3)) + "}\n",
                                                        MiColor.getColor());
                                                linPrint.add(i);
                                            }
                                            else imprimirLin = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!encontrado) TPTextoDuplicados.setText(TPTextoDuplicados.getText() + linLength + " items procesados, no existen items duplicados para vender.");
            //else TPTextoDuplicados.setText(TPTextoDuplicados.getText() + "Operación de búsqueda terminada.");
            else appendToPane(TPTextoDuplicados, "Operación de búsqueda terminada.", Color.BLACK);
        }
        catch (IOException e)   // Si no existe el archivo...
        {
            System.err.println(e.getMessage());
            TPTextoDuplicados.setText("Error: No existe el archivo inventory.csv, asegúrese de bumpear primero el fichero con el plugin BetterInventoryExport.");
        }
        finally
        {
            if (fichero != null) fichero.close();    // Cerrar fichero
        }
        
        long end2 = System.currentTimeMillis();      
        System.out.println("Elapsed Time in milli seconds: "+ (end2-start2));
    }//GEN-LAST:event_BEmpezarBusquedaActionPerformed

    private void BMenosSizeFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMenosSizeFontActionPerformed
        
        Font fuenteConMenosSize = this.TPTextoDuplicados.getFont().deriveFont(this.TPTextoDuplicados.getFont().getSize() - 1.0f);
        this.TPTextoDuplicados.setFont(fuenteConMenosSize);
    }//GEN-LAST:event_BMenosSizeFontActionPerformed

    private void BMasSizeFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMasSizeFontActionPerformed
        
        Font fuenteConMasSize = this.TPTextoDuplicados.getFont().deriveFont(this.TPTextoDuplicados.getFont().getSize() + 1.0f);
        this.TPTextoDuplicados.setFont(fuenteConMasSize);
    }//GEN-LAST:event_BMasSizeFontActionPerformed

    int estado = 0;
    private void TPTextoDuplicadosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TPTextoDuplicadosKeyReleased
        // Arriba, arriba, abajo, abajo, izquierda, derecha, izquierda, derecha, B, A
        //System.out.println(evt.getKeyCode());
        if (estado == 0)
        {
            if (evt.getKeyCode() == 38) estado++;
        }
        else if (estado == 1)
        {
            if (evt.getKeyCode() == 38) estado++;
            else estado = 0;
        }
        else if (estado == 2)
        {
            if (evt.getKeyCode() == 40) estado++;
            else estado = 0;
        }
        else if (estado == 3)
        {
            if (evt.getKeyCode() == 40) estado++;
            else estado = 0;
        }
        else if (estado == 4)
        {
            if (evt.getKeyCode() == 37) estado++;
            else estado = 0;
        }
        else if (estado == 5)
        {
            if (evt.getKeyCode() == 39) estado++;
            else estado = 0;
        }
        else if (estado == 6)
        {
            if (evt.getKeyCode() == 37) estado++;
            else estado = 0;
        }
        else if (estado == 7)
        {
            if (evt.getKeyCode() == 39) estado++;
            else estado = 0;
        }
        else if (estado == 8)
        {
            if (evt.getKeyCode() == 66) estado++;
            else estado = 0;
        }
        else if (estado == 9)
        {
            if (evt.getKeyCode() == 65)
            {
                if (colorSecreto == 0) colorSecreto = 1;
                else colorSecreto = 0;
            }
            MiColor.resetColor();
            estado = 0;
        }
    }//GEN-LAST:event_TPTextoDuplicadosKeyReleased

    /**
    * Con esta método compruebo el Status code de la respuesta que recibo al hacer la petición
    * EJM:
    * 		200 OK			300 Multiple Choices
    * 		301 Moved Permanently	305 Use Proxy
    * 		400 Bad Request		403 Forbidden
    * 		404 Not Found		500 Internal Server Error
    * 		502 Bad Gateway		503 Service Unavailable
    * @param url
    * @return Status Code
    */
   private static int getStatusConnectionCode(String url) {

       Response response = null;

       try {
           response = Jsoup.connect(url).userAgent("Mozilla/5.0").timeout(100000).ignoreHttpErrors(true).execute();
       } catch (IOException ex) {
           System.out.println("Excepción al obtener el Status Code: " + ex.getMessage());
       }
       return response.statusCode();
   }
   
   private static WebDriver driver;
   /**
    * Con este método devuelvo un objeto de la clase Document con el contenido del
    * HTML de la web que me permitirá parsearlo con los métodos de la librelia JSoup
    * @param url
    * @return Documento con el HTML
    */
    public static Document getHtmlDocument(String url)
    {
        String html = null;
        Document doc = null;
        try
        {
            if (getStatusConnectionCode(url) != 200)
            {
                return null;
            }

            System.setProperty("webdriver.edge.driver", "msedgedriver.exe");

            // Hacer que el driver se abra sin header (sin que aparezca en tu cara)
            EdgeOptions options = new EdgeOptions();
            options.setHeadless(true); // Abrir de forma silenciosa

            driver = new EdgeDriver(options);
            driver.manage().window().setSize(new Dimension(1280, 720)); // Abrir en forma de PC
            driver.get(url); // Entrar en la página

            boolean completo = false;
            int milisegs = 2000;
            int intentos = 0;
            while (!completo)   // Mientras el javascript no se haya cargado de forma completa...
            {
                Thread.sleep(milisegs); // Se esperan unos segundos
                html = driver.getPageSource();  // Guardamos el html actual de la página
                if (!html.substring(82972).contains("<td></td>")) completo = true;  // Si no contiene un campo vacío, entonces ya está cargado
                else milisegs += 500;  // Si hay campos vacíos, cada vez el tiempo de espera aumenta más
                System.out.println(++intentos);
                if (intentos >= 10) // Si ya se han hecho demasiados intentos... (el driver ha recogido mal la página)
                {
                    driver.get(url); // Reiniciar página
                    intentos = 0;   // Reiniciar intentos
                    milisegs -= 4000;   // Bajar el tiempo de espera
                }
            }
            driver.quit();   // Cerrar el driver
            
            System.out.println(html.substring(82972).contains("<td></td>") ? "Hay un errror en el doc" : "Doc sin campos vacíos, todo OK");
            doc = Jsoup.parse(html.substring(87430, html.length() - 2450), "", Parser.xmlParser());    // Pasar el html al JSoup doc
            //System.out.println(html);
        }
        catch (Exception e)
        {
            System.err.println(e.getMessage());
        }
        return doc;
    }
   
    private String precioObjeto(String nombre, String color)
    {
        try
        {
            if (pagina != null && CBMostrarPrecios.isSelected()) // Si existe la página y se quiere mostrar los precios...
            {
                Element elemento = null;
                Elements elementos = pagina.getElementsContainingText(nombre);  // Se busca los elementos que contengan el nombre a buscar
                
                for (Element elem : elementos)  // Por cada elemento encontrado...
                {
                    if (elem.className().equals("itemNameSpan"))    // Nos quedamos con el hijo del padre que tiene los hermanos con los precios
                    {
                        //System.out.println(elem.toString());
                        elemento = elem;
                    }
                }
                if (elemento == null) return "?";   // Si no se ha encontrado el hijo, salir
                Element elementoPrecio = elemento.parent().nextElementSibling();    // Por defecto (sin color), el precio es el hermano del padre del hijo
                if (elementoPrecio == null) return "?"; // Si no tiene hermano del padre, salir
                for (int i = 0; i < colorPaso(color); i++)  // Se busca el precio del color específico
                {
                    elementoPrecio = elementoPrecio.nextElementSibling();
                }
                return elementoPrecio.text();   // Se retorna el texto del elemento con el precio
            }
            else return "*";
        }
        catch (Exception e)
        {
            System.err.println(e.getMessage());
            return "?";
        }
    }
    
    private int colorPaso(String color) throws Exception
    {
        if (color.equals("No_color")) return 0;
        else if (color.equals("Black")) return 1;
        else if (color.equals("Titanium White")) return 2;
        else if (color.equals("Grey")) return 3;
        else if (color.equals("Crimson")) return 4;
        else if (color.equals("Pink")) return 5;
        else if (color.equals("Cobalt")) return 6;
        else if (color.equals("Sky Blue")) return 7;
        else if (color.equals("Burnt Sienna")) return 8;
        else if (color.equals("Saffron")) return 9;
        else if (color.equals("Lime")) return 10;
        else if (color.equals("Forest Green")) return 11;
        else if (color.equals("Orange")) return 12;
        else if (color.equals("Purple")) return 13;
        else if (color.equals("Gold")) return 14;
        else throw new Exception("Error de color");
    }
    
    private void BBuscarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBuscarNombreActionPerformed
        long start2 = System.currentTimeMillis();
      
        this.TPTextoDuplicados.setText("");
        Scanner in = null;
        
        try
        {
            Object[] procesadoInventario = conseguirMatrizObjetos(in);
            String[][] lin = (String[][])procesadoInventario[0];
            int linLength = (int)procesadoInventario[1];
            in = (Scanner)procesadoInventario[2];
            
            int contador = 0;
            
            for (int i = 0; i < linLength; i++)
            {
                if (stripAccents(lin[i][1]).toLowerCase().contains(stripAccents(this.TFBuscarNombre.getText()).toLowerCase()) || this.TFBuscarNombre.getText().equals("0-9a-zA-Z"))
                {
                    if (colorSecreto == 0) MiColor.cambiaColorPrincipales();
                    else MiColor.cambiaColorRainbow();
                    
                    contador++;
                    if (contador == 1) TPTextoDuplicados.setText(TPTextoDuplicados.getText() + linLength + " items procesados, se han detectado items con el nombre solicitado:\n");
                    
                    appendToPane(TPTextoDuplicados,
                            contador + ". " + lin[i][1] + " [" + lin[i][2]
                            + "] (" + traduccionNone(lin, i, 3) + ", "
                            + traduccionNone(lin, i, 6) + ", " + traduccionNone(lin, i, 12) + ") "
                            + lin[i][7] + ", " + traduccionTradeable(lin[i][9]) + " {" + precioObjeto(lin[i][1], traduccionNone(lin, i, 3)) + "}\n",
                            MiColor.getColor());
                }
            }
            if (contador == 0) this.TPTextoDuplicados.setText(TPTextoDuplicados.getText() + linLength + " items procesados, no existen items con el nombre solicitado.");
            else appendToPane(TPTextoDuplicados, "Operación de búsqueda terminada.", Color.BLACK);
        }
        catch (IOException e)
        {
            System.err.println(e.getMessage());
            TPTextoDuplicados.setText("Error: No existe el archivo inventory.csv, asegúrese de bumpear primero el fichero con el plugin BetterInventoryExport.");
        }
        finally
        {
            if (in != null) in.close();
        }
        
        long end2 = System.currentTimeMillis();      
        System.out.println("Elapsed Time in milli seconds: "+ (end2-start2));
    }//GEN-LAST:event_BBuscarNombreActionPerformed

    private static final Pattern STRIP_ACCENTS_PATTERN = Pattern.compile("\\p{InCombiningDiacriticalMarks}+"); //$NON-NLS-1$
    public static String stripAccents(final String input) {
        if (input == null) {
            return null;
        }
        final StringBuilder decomposed = new StringBuilder(Normalizer.normalize(input, Normalizer.Form.NFD));
        convertRemainingAccentCharacters(decomposed);
        // Note that this doesn't correctly remove ligatures...
        return STRIP_ACCENTS_PATTERN.matcher(decomposed).replaceAll("");
    }
    
    private static void convertRemainingAccentCharacters(final StringBuilder decomposed) {
        for (int i = 0; i < decomposed.length(); i++) {
            if (decomposed.charAt(i) == '\u0141') {
                decomposed.setCharAt(i, 'L');
            } else if (decomposed.charAt(i) == '\u0142') {
                decomposed.setCharAt(i, 'l');
            }
        }
    }
    
    private void TFBuscarNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFBuscarNombreFocusLost
        
        if (this.TFBuscarNombre.getText().equals(""))
        {
            this.TFBuscarNombre.setText("Escribe aquí un item a buscar...");
        }
    }//GEN-LAST:event_TFBuscarNombreFocusLost

    private void TFBuscarNombreFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFBuscarNombreFocusGained
        
        if (this.TFBuscarNombre.getText().equals("Escribe aquí un item a buscar...")) this.TFBuscarNombre.setText("");
    }//GEN-LAST:event_TFBuscarNombreFocusGained

    private void LMostrarTodoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LMostrarTodoMouseClicked
        
        Clipboard clpbrd = Toolkit.getDefaultToolkit ().getSystemClipboard ();
        clpbrd.setContents (new StringSelection("0-9a-zA-Z"), null);
    }//GEN-LAST:event_LMostrarTodoMouseClicked

    private void LMostrarTodoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LMostrarTodoMousePressed
        
        this.LMostrarTodo.setForeground(new Color(0, 255, 0));
    }//GEN-LAST:event_LMostrarTodoMousePressed

    private void LMostrarTodoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LMostrarTodoMouseReleased
        
        this.LMostrarTodo.setForeground(new Color(0, 0, 0));
    }//GEN-LAST:event_LMostrarTodoMouseReleased

    private void BActualizarPaginaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActualizarPaginaActionPerformed
        this.abrirPagina();
    }//GEN-LAST:event_BActualizarPaginaActionPerformed

    private void CBMostrarPreciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBMostrarPreciosActionPerformed
        this.BActualizarPagina.setEnabled(this.CBMostrarPrecios.isSelected());
    }//GEN-LAST:event_CBMostrarPreciosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BActualizarPagina;
    private javax.swing.JButton BBuscarNombre;
    private javax.swing.JButton BEmpezarBusqueda;
    private javax.swing.JButton BMasSizeFont;
    private javax.swing.JButton BMenosSizeFont;
    private javax.swing.JCheckBox CBExotico;
    private javax.swing.JCheckBox CBImportado;
    private javax.swing.JCheckBox CBInusual;
    private javax.swing.JCheckBox CBLimitado;
    private javax.swing.JCheckBox CBMercadoNegro;
    private javax.swing.JCheckBox CBMostrarPrecios;
    private javax.swing.JCheckBox CBMuyRaro;
    private javax.swing.JCheckBox CBPorColor;
    private javax.swing.JCheckBox CBRaro;
    private javax.swing.JLabel LEstadoPagina;
    private javax.swing.JLabel LFechaComprobacion;
    private javax.swing.JLabel LMostrarTodo;
    private javax.swing.JTextField TFBuscarNombre;
    private javax.swing.JTextPane TPTextoDuplicados;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
